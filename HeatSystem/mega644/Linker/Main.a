;#include <mega644p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;//unsigned int sh1 = 0;                            //счетчик для цикла инициализации
;//unsigned int counter = 0, countIndicate = 0;     //счетчик промежуточного значения(АЦП); счетчик для индикатора
;//unsigned char dignum = 0, type = 0;              //номер отображаемой цифры; тип операции по прерыванию Т0
;//unsigned char zoomer = 0b01001110, ;             //величина зуммера
;//bit butt1 = 0, butt2 = 0, butt3=0;               //флаги для кнопок(3)
;
;
;/*interrupt [19] void OFTimer0(void)  //прерывание по переполнению таймера 0
;{
;   countIndicate++;
;   if((type|0b11111110)==255)
;    if(countIndicate == 19)
;    {
;       ShowOneDigit(D[dignum], A[10], C[10]);
;       if (dignum<3) dignum++; else dignum = 0;
;       countIndicate = 0;
;    }
;
;} */
;
;
;//interrupt [14] void ComATimer1(void)  //прерывание по совпадению таймера 1
;//{
;//    TCNT1H = 0x00;
;//    TCNT1L = 0x00;
;//    sh1++;
;//}
;
;//interrupt [25] void ADC(void)  //прерывание по окончанию АЦП
;//{
;//    //counter = ADCL + ADCH*256;
;//   // ADCSRA = 0b11001111; //Запуск АЦП (Частота делится на 128)
;//}
;//
;//interrupt [23] void UTX(void)  //прерывание по передачи USART
;//{
;//   //PORTD = PORTD&0b11111011;
;//   //UCSR0B = 0b10010000; //IntRX,IntTx,IntClear,RX,TX,Format2,RXbit.TXbit
;//}
;//
;//interrupt [21] void URX(void)  //прерывание по приему USART
;//{
;//   //int a=UDR0;
;//  // PORTD = PORTD|0b00000100;
;//  // UCSR0B = 0b01001000; //IntRX,IntTx,IntClear,RX,TX,Format2,RXbit.TXbit
;//  // UDR0=a+1;
;//}
;
;
;void main(void)
; 0000 0035 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0036 
; 0000 0037 
; 0000 0038 //  OCR1AH = 0b10011000;
; 0000 0039 //  OCR1AL = 0b10011001;
; 0000 003A //  TIMSK1 = 0b00000010;
; 0000 003B //  TCCR1A = 0b01000000;
; 0000 003C //  TCCR1B = 0b00000100;
; 0000 003D   #asm("sei");
;PCODE: $0000000E VOL: 0
	sei
;PCODE: $0000000F VOL: 0
; 0000 003E 
; 0000 003F 
; 0000 0040   //Запуск вспомогательного таймера
; 0000 0041   //type |= 1<<0;
; 0000 0042   //TIMSK0 = 0b00000001;
; 0000 0043   //TCCR0A = 0b00000000;
; 0000 0044   //TCCR0B = 0b00000101;
; 0000 0045 
; 0000 0046   //Работа с ЛСД
; 0000 0047 //  DDRB=0b00010011;
; 0000 0048 // // PORTB=0b00001100;
; 0000 0049 //  DDRC=0b00011100;
; 0000 004A //  PORTC=0b00000000;
; 0000 004B //  delay_us(250);
; 0000 004C 
; 0000 004D //  LCD_command(TwoLineSmallSimbols);
; 0000 004E //  LCD_command(ImageON);
; 0000 004F //  LCD_command(clear);
; 0000 0050 //  LCD_command(reset);
; 0000 0051 
; 0000 0052 // //цикл инициализации
; 0000 0053 // while(sh1<sh)
; 0000 0054 //    {
; 0000 0055 //      #asm("nop");
; 0000 0056 //    }
; 0000 0057 //
; 0000 0058 //  TIMSK1 = 0x00;
; 0000 0059 //  TCCR1A = 0x00;
; 0000 005A //  TCCR1B = 0x00;
; 0000 005B 
; 0000 005C 
; 0000 005D   //Управление светодиодом
; 0000 005E   #asm("nop");
;PCODE: $00000010 VOL: 0
	nop
;PCODE: $00000011 VOL: 0
; 0000 005F   DDRD =  (1<<5);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0060   //PORTD = (1<<6)|(1<<5)|(1<<4)|(1<<3);
; 0000 0061   #asm("nop");
;PCODE: $00000014 VOL: 0
	nop
;PCODE: $00000015 VOL: 0
; 0000 0062 
; 0000 0063   /*
; 0000 0064   //Настройка USART
; 0000 0065    UCSR0A = 0x00;  //flags:RX,TX,Clear,erCadr,Over,erParity, Speed, Multy
; 0000 0066    UCSR0C = 0b00000110;//Mode1,Mode2,Parity,Stop,Format1,Format0, Takt
; 0000 0067    UBRR0H = 0x00;
; 0000 0068    UBRR0L = 0b10000001;
; 0000 0069 
; 0000 006A    DDRD =  DDRD|0b00000100;
; 0000 006B    PORTD = PORTD&0b11111011;
; 0000 006C    UCSR0B = 0b10010000; //IntRX,IntTx,IntClear,RX,TX,Format2,RXbit.TXbit
; 0000 006D    //PORTD = PORTD|0b00000100;
; 0000 006E    //UCSR0B = 0b01001000;
; 0000 006F    //UDR0=0x11;
; 0000 0070 
; 0000 0071   */
; 0000 0072 
; 0000 0073 
; 0000 0074   //Инициализация аналогого компаратора
; 0000 0075   // ACSR = 0b10000000;
; 0000 0076 
; 0000 0077   //Инициализация АЦП
; 0000 0078   // DIDR0 = 1;
; 0000 0079    //ADMUX = 0b01000000;
; 0000 007A    //ADCSRA= 0b11001111; //Запуск АЦП (Частота делится на 128)
; 0000 007B 
; 0000 007C while (1)
;PCODE: $00000016 VOL: 0
; 0000 007D     {
; 0000 007E       /* if (PIND.6)
; 0000 007F         { PORTD |= 1<<5;}
; 0000 0080        else
; 0000 0081         {
; 0000 0082            PORTD &= ~(1<<5);
; 0000 0083            butt3 =~butt3;
; 0000 0084         }
; 0000 0085 
; 0000 0086 
; 0000 0087        if (PIND.3)
; 0000 0088         {
; 0000 0089            butt1=0;
; 0000 008A         }
; 0000 008B         else
; 0000 008C         {
; 0000 008D           delay_ms(60);
; 0000 008E           if (~PIND.3)
; 0000 008F            {
; 0000 0090              //if(butt1==1) delay_ms(300);
; 0000 0091              counter++;
; 0000 0092              butt1=1;
; 0000 0093            }
; 0000 0094            else
; 0000 0095            {
; 0000 0096               butt1=0;
; 0000 0097            }
; 0000 0098         }
; 0000 0099 
; 0000 009A 
; 0000 009B         if (PIND.4)
; 0000 009C         {
; 0000 009D            butt2=0;
; 0000 009E         }
; 0000 009F         else
; 0000 00A0         {
; 0000 00A1           delay_ms(60);
; 0000 00A2           if (~PIND.4)
; 0000 00A3           {
; 0000 00A4             //if(butt2==1) delay_ms(300);
; 0000 00A5             if(counter>0)counter--;
; 0000 00A6             butt2=1;
; 0000 00A7           }
; 0000 00A8           else
; 0000 00A9           {
; 0000 00AA             butt2=0;
; 0000 00AB           }
; 0000 00AC         }
; 0000 00AD 
; 0000 00AE 
; 0000 00AF 
; 0000 00B0         if (PIND.3)
; 0000 00B1         {
; 0000 00B2            butt1=0;
; 0000 00B3         }
; 0000 00B4 
; 0000 00B5         if (PIND.4)
; 0000 00B6         {
; 0000 00B7            butt2=0;
; 0000 00B8         }
; 0000 00B9 
; 0000 00BA 
; 0000 00BB        // ShowDigit(counter);
; 0000 00BC        // LCD_command(0xc0);
; 0000 00BD         if((butt2==1)||(butt1==1)) delay_ms(300); */
; 0000 00BE 
; 0000 00BF     }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 00C0 }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
